// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  hash          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  Board         Board[]
  List          List[]
  Card          Card[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Board {
  id     Int    @id @default(autoincrement())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
  List   List[]
  Card   Card[]
}

model List {
  id       Int    @id @default(autoincrement())
  name     String
  position Int
  board    Board  @relation(fields: [boardId], references: [id])
  boardId  Int
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  cards    Card[]
}

model Card {
  id       Int    @id @default(autoincrement())
  title    String
  position Int
  list     List?  @relation(fields: [listId], references: [id])
  listId   Int?
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  board    Board  @relation(fields: [boardId], references: [id])
  boardId  Int
}
